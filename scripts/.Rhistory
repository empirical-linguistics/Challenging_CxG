aes(label = after_stat(count)),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = .2, end = .8)
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count)),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = .8, end = .2)
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count)),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = .9, end = .2)
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count)),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = 1, end = 0)
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count),
col = decision),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = 1, end = 0)
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count),
col = decision),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = 1, end = 0) +
scale_color_manual(values = c("white", "black", "black"))
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count),
col = decision),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = 1, end = 0) +
scale_color_manual(values = c("black", "black", "white"))
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count),
col = decision),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = 1, end = 0) +
scale_color_manual(values = c("black", "black", "white")) +
guides(color = "none")
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count),
col = decision),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = 1, end = 0) +
scale_color_manual(values = c("black", "black", "white")) +
guides(color = "none") +
guides(fill = guide_legend(title = "Decision"))
ggplot(papers, aes(x = country, fill = decision)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
geom_text(stat = "count",
aes(label = after_stat(count),
col = decision),
position = position_fill(vjust = .5)) +
scale_fill_viridis_d(begin = 1, end = 0) +
scale_color_manual(values = c("black", "black", "white")) +
guides(color = "none") +
guides(fill = guide_legend(title = "Decision")) +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12))
library(tidyverse)
library(pscl)
library(MASS)
library(effects)
d <- read_csv("../data/graphvar_summary.csv")
# grade as numeric
d$grade <- as.numeric(d$grade)
d$subject
d$subject %>% unique
# explore the other columns
d$subject
# explore the other columns
d$subject %>% unique
d[which(d$subject == "DEU"),]
d[which(d$subject == "DE"),]
d[which(d$subject == "DEU"),]$subject <- "DE"
d$gender
d$gender %>% unique
ggplot(d, aes(x = year, y = gender)) +
geom_col()
ggplot(d, aes(x = year, y = gender)) +
geom_col(stat = "mean")
ggplot(d, aes(x = year, y = gender)) +
geom_point()
d$grade
d$grade %>% hist
# errors:
d$errors %>% hist
which(d$errors==0)
# zeros?
d$errors==0
which(d$errors==1)
View(d)
which(d$errors==1)
d[which(d$errors==1),]
range(d$errors)
library(tidyverse)
library(shiny)
ui <- fluidPage(
titlePanel("Poisson"),
sliderInput(inputId = "mylambda",
label = "lambda",
value = 10, min = 1, max = 100, step = 1),
plotOutput(outputId = "reactivePlot"),
textOutput(outputId = "varianceText")
)
server <- function(input, output) {
output$reactivePlot <- renderPlot({
cur <- dpois(1:200, lambda = input$mylambda)
barplot(cur, names.arg = 1:200, xlab = "count", ylab = "probability")
})
output$varianceText <- renderText({
cur <- dpois(1:200, lambda = input$mylambda)
paste0("Variance:", round(var(cur), digits = 4))
})
}
shinyApp(ui = ui, server = server)
mynumbers <- seq(-10, 10, .5)
mynumbers
plot(mynumbers)
plot(mynumbers, mynumbers)
plot(1:length(mynumbers), mynumbers)
plot(mynumbers, 1:length(mynumbers))
plot(mynumbers, mynumbers)
plot(mynumbers, mynumbers,
type = "l") # linear relationship
abline(a = 0, b = 0)
abline(a = 0, b = 0, lty = 2, col = "grey")
plot(mynumbers, mynumbers,
type = "l") # linear relationship
abline(a = 0, b = 0, lty = 2, col = "grey")
plot(exp(mynumbers), mynumbers)
exp(3)
exp(4)
exp(7)
mynumbers
exp(10)
mynumbers <- seq(-3, 3, .2)
plot(mynumbers, mynumbers,
type = "l") # linear relationship
abline(a = 0, b = 0, lty = 2, col = "grey")
plot(exp(mynumbers), mynumbers)
exp(0)
plot(exp(mynumbers), exp(mynumbers))
set.seed(1985)
mynumbers2 <- mynumbers + sample(seq(-2,2,.1), length(mynumbers))
plot(mynumbers, mynumbers2,
type = "l") # linear relationship
mynumbers <- seq(-3, 3, .2)
set.seed(1985)
mynumbers2 <- mynumbers + sample(seq(-.2,.2,.01), length(mynumbers))
plot(mynumbers, mynumbers2,
type = "l") # linear relationship
abline(a = 0, b = 0, lty = 2, col = "grey")
plot(exp(mynumbers), exp(mynumbers))
mynumbers2 <- mynumbers - .2
mynumbers <- seq(-3, 3, .2)
mynumbers2 <- mynumbers - .2
plot(mynumbers, mynumbers2,
type = "l") # linear relationship
abline(a = 0, b = 0, lty = 2, col = "grey")
plot(exp(mynumbers), exp(mynumbers))
plot(exp(mynumbers), exp(mynumbers), type = "l")
plot(exp(mynumbers), exp(mynumbers2), type = "l")
mynumbers <- seq(-3, 3, .2)
mynumbers2 <- mynumbers - 2
plot(mynumbers, mynumbers2,
type = "l") # linear relationship
abline(a = 0, b = 0, lty = 2, col = "grey")
plot(exp(mynumbers), exp(mynumbers2), type = "l")
plot(mynumbers, exp(mynumbers2), type = "l")
mynumbers <- seq(-2, 3, .2)
mynumbers2 <- mynumbers - 2
plot(mynumbers, mynumbers2,
type = "l") # linear relationship
abline(a = 0, b = 0, lty = 2, col = "grey")
plot(mynumbers, exp(mynumbers2), type = "l")
abline(a = 1, b = 0, lty = 2, col = "grey")
install.packages("NegBinomial")
library(stats)
dnbinom()
?dnbinom
dnbinom(1:100, size = 10, mu = 10)
dnbinom(1:100, size = 30, mu = 10)
ui <- fluidPage(
titlePanel("Poisson"),
sliderInput(inputId = "mylambda",
label = "lambda",
value = 10, min = 1, max = 100, step = 1),
plotOutput(outputId = "reactivePlot"),
textOutput(outputId = "varianceText"),
titlePanel("Negative Binomial"),
sliderInput(inputId = "mymu",
label = "mu",
value = 10, min = 1, max = 100, step = 1),
sliderInput(inputId = "mysize",
label = "size (dispersion parameter)",
value = 10, min = 1, max = 100, step = 1),
plotOutput(outputId = "reactivePlot2"),
textOutput(outputId = "varianceText2")
)
server <- function(input, output) {
output$reactivePlot <- renderPlot({
cur <- dpois(1:200, lambda = input$mylambda)
barplot(cur, names.arg = 1:200, xlab = "count", ylab = "probability")
})
output$varianceText <- renderText({
cur <- dpois(1:200, lambda = input$mylambda)
paste0("Variance:", round(var(cur), digits = 4))
})
output$reactivePlot2 <- renderPlot({
cur <- dnbinom(1:200, mu = input$mymu, size = input$mysize)
barplot(cur, names.arg = 1:200, xlab = "count", ylab = "probability")
})
output$varianceText2 <- renderText({
cur <- dnbinom(1:200, mu = input$mylambda)
paste0("Variance:", round(var(cur), digits = 4))
}
)
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(pscl)
library(MASS)
library(effects)
# read data ---------------------------------------------------------------
d <- read_csv("../data/graphvar_summary.csv")
# grade as numeric
d$grade <- as.numeric(d$grade)
# explore the other columns
d$subject %>% unique
d[which(d$subject == "DEU"),]$subject <- "DE"
# grades:
d$grade %>% hist
# errors:
d$errors %>% hist
# zeros?
d$errors==0
# minimum and maximum
range(d$errors)
library(glmmTMB)
library(lme4)
# fit a model
glm(errors ~ year + subject + gender, family = "poisson")
# fit a model
glm(errors ~ year + subject + gender,
family = "poisson", data = d)
# fit a model
m <- glm(errors ~ year + subject + gender,
family = "poisson", data = d)
summary(m)
d$tokens
?stderr
# standard error helper function
se <- function(x) sqrt(var(x) / length(x))
d %>% group_by(year, subject, gender) %>%
summarise(
n = sum(tokens),
err = sum(errors),
err_rel = err/n,
se = se(err/n)
)
d %>% group_by(year, subject, gender) %>%
summarise(
n = sum(tokens),
err = sum(errors),
err_rel = err/n,
se = se(na.omit(err/n))
)
d %>% group_by(year, subject, gender) %>%
summarise(
n = sum(tokens),
err = sum(errors),
err_rel = err/n
)
d %>% mutate(err_rel = d$errors / d$tokens)
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel))
)
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
)
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
) %>%
ggplot(aes(x = year,  y = mean_err, group = c(subject, gender))) +
geom_point()
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
) %>%
ggplot(aes(x = year,  y = mean_err, group = list(subject, gender))) +
geom_point()
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
) %>%
ggplot(aes(x = year,  y = mean_err, group = gender)) +
geom_point()
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
) %>%
ggplot(aes(x = year,  y = mean_err, group = gender)) +
geom_point() + facet_wrap(~subject)
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
) %>%
ggplot(aes(x = year,  y = mean_err, group = gender)) +
geom_point() + facet_wrap(~subject) +
geom_smooth()
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
) %>%
ggplot(aes(x = year,  y = mean_err, group = gender, fill = gender)) +
geom_point() + facet_wrap(~subject) +
geom_smooth()
d %>% mutate(err_rel = d$errors / d$tokens) %>%
group_by(year, subject, gender) %>%
summarise(
mean_err = mean(err_rel),
se_rel = se(na.omit(err_rel)),
min = mean_err-se_rel,
max = mean_err+se_rel
) %>%
ggplot(aes(x = year,  y = mean_err, group = gender, col = gender)) +
geom_point() + facet_wrap(~subject) +
geom_smooth()
summary(m)
# fit a model
m <- glm(errors ~ year + subject + gender + offset(tokens),
family = "poisson", data = d)
d$tokens
# fit a model
m <- glm(errors ~ year + subject + gender + offset(tokens),
family = "poisson", data = d)
d$tokens
d$tokens %>% range()
d$errors %>% range
# fit a model
m <- glm(errors ~ year + subject  + offset(tokens),
family = "poisson", data = d)
# fit a model
m <- glm(errors ~ year  + offset(tokens),
family = "poisson", data = d)
# fit a model
m <- glm(errors ~ year + offset(round(tokens/10)),
family = "poisson", data = d)
# fit a model
m <- glm(errors ~ year + subject,
family = "poisson", data = d)
summary(m)
glm.nb(errors ~ year + subject + offset(tokens), data = d)
glm.nb(errors ~ year + subject + data = d)
glm.nb(errors ~ year + subject, data = d)
library(tidyverse)
library(glmmTMB)
library(MASS)
library(pscl)
library(effects)
library(vcd)
library(car)
library(readxl)
library(ggbeeswarm)
library(VGAM)
# fake data ---------------------------------------------------------------
set.seed(utf8ToInt("Ascona"))
counts <- rpois(100, lambda = 2)
counts2 <- rpois(100, lambda = 1)
# dataframe
df <- tibble(category = c(rep("A", 100), rep("B", 100)),
count = c(counts, counts2))
# plot
ggplot(df, aes(x = category, y = count)) +
geom_boxplot()
# model
m <- glm(count ~ category, family = "poisson", data = df)
summary(m)
plot(allEffects(m))
# The predict() function returns the means that
# the model estimates.
preds <- predict(m, type = "response")
preds
# the density distribution function (for Poisson: dpois)
# returns the probability that the observation
# is equal to a given value, given the current
# lambda value.
sum(dpois(x=0, lambda = preds)) # ca. 50 zeros expected
# calculate Pearson chisquare & Pearson dispersion
# Pearson dispersion value of 0 indicates a "true"
# Poisson distribution. Higher values indicate
# overdisperson, lower values indicate under-
# dispersion.
pr <- resid(m, type = "pearson") # residuals
pchi2 <- sum(residuals(m, type="pearson")^2) #Pearson chi-squared
disp <- pchi2/m$df.residual # Pearson disperson statistic
pchi2; disp
d <- read_csv("../data/nettle_1999_climate.csv")
m1 <- glm(Langs ~ MGS, data = d)
# plot
plot(allEffects(m1))
pr <- resid(m1, type = "pearson") # residuals
pchi2 <- sum(residuals(m1, type="pearson")^2) #Pearson chi-squared
disp <- pchi2/m1$df.residual # Pearson disperson statistic
pchi2; disp #woah!
# also check for zero-inflation:
# how many 0s does the model predict?
preds <- predict(m1, type = "response")
sum(dpois(x=0, lambda = preds)) %>% round
# zero-truncated (positive) negative binomial model:
m2 <- vglm(Langs ~ MGS, family = posnegbinomial(),
data = d)
summary(m2)
# zero-truncated (positive) negative binomial model:
m2 <- vglm(Langs ~ MGS + offset(Area), family = posnegbinomial(),
data = d)
summary(m2)
library(tidyverse)
library(pscl)
library(MASS)
library(lme4)
library(effects)
library(glmmTMB)
# read data ---------------------------------------------------------------
d <- read_csv("../data/graphvar_summary.csv")
# only use 1980ff.
filter(d, year > 1980)
# only use 1980ff.
d <- filter(d, year > 1980)
table(d$year, d$subject)
d$tokens
filter(d, tokens > 1000 & tokens < 2500)
d <- filter(d, tokens > 1000 & tokens < 2500)
# grade as numeric
d$grade <- as.numeric(d$grade)
# explore the other columns
d$subject %>% unique
d[which(d$subject == "DEU"),]$subject <- "DE"
# export
d
# grades:
d$grade %>% hist
# errors:
d$errors %>% hist
# zeros?
d$errors==0
# minimum and maximum
range(d$errors)
# fit a model
m <- glm(errors ~ year + subject,
family = "poisson", data = d)
summary(m)
# export
write_csv(d, "../data/graphvar_summary_1980ff.csv")
